// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                      String          @id
  name                    String
  email                   String          @unique
  password                String?
  oauthId                 String?
  avatar                  String?
  providerId              String?
  participants            Participants[]
  transactionsCreatedByMe Transactions[]  @relation("TransactionsCreatedByMe")
  groups                  Groups[]        @relation("GroupsOwnedByMe")
  refreshTokens           RefreshTokens[]
}

model Participants {
  id                 String                   @id
  userId             String
  groupId            String
  user               Users                    @relation(fields: [userId], references: [id])
  group              Groups                   @relation(fields: [groupId], references: [id])
  groupInvitations   ParticipantInvitations[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  transactionDebtors TransactionDebtors[]
  transactionsOwners TransactionOwners[]
  transactions       Transactions[]

  @@unique([groupId, userId])
}

model TransactionDebtors {
  transaction   Transactions @relation(fields: [transactionId], references: [id])
  transactionId String
  participant   Participants @relation(fields: [participantId], references: [id])
  participantId String
  total         Float?

  @@id([transactionId, participantId])
}

model Groups {
  id               String                   @id
  title            String
  description      String?
  icon             String
  owner            Users                    @relation(fields: [ownerId], references: [id], name: "GroupsOwnedByMe")
  ownerId          String
  transactions     Transactions[]
  participants     Participants[]
  groupInvitations ParticipantInvitations[]
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
}

model TransactionOwners {
  participant   Participants @relation(fields: [participantId], references: [id])
  participantId String
  transaction   Transactions @relation(fields: [transactionId], references: [id])
  transactionId String
  total         Float?

  @@id([participantId, transactionId])
}

model Transactions {
  id          String  @id
  title       String
  description String?
  total       Float
  icon        String
  groupId     String
  creatorId   String

  owners         TransactionOwners[]
  creator        Users                @relation(fields: [creatorId], references: [id], name: "TransactionsCreatedByMe")
  group          Groups               @relation(fields: [groupId], references: [id])
  isSettled      Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  participants   Participants?        @relation(fields: [participantsId], references: [id])
  participantsId String?
  debtors        TransactionDebtors[]
}

model ParticipantInvitations {
  id        String       @id
  groupId   String
  inviterId String
  inviter   Participants @relation(fields: [inviterId], references: [id])
  group     Groups       @relation(fields: [groupId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  expiresAt DateTime
}

model RefreshTokens {
  id        String   @id
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
